// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/28/2022 02:23:36"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          CPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK_in;
// wires                                               
wire [15:0] aux_ADDJMP;
wire aux_H1;
wire aux_JMP_signal;
wire aux_PULL;
wire [19:0] aux_ROM_INST;
wire [11:0] aux_ROMADD;
wire [15:0] aux_S2_PC;
wire [6:0] aux_T;
wire [15:0] aux_TOS;
wire H2;
wire [15:0] W_reg;

// assign statements (if any)                          
CPU i1 (
// port map - connection between master ports and signals/registers   
	.aux_ADDJMP(aux_ADDJMP),
	.aux_H1(aux_H1),
	.aux_JMP_signal(aux_JMP_signal),
	.aux_PULL(aux_PULL),
	.aux_ROM_INST(aux_ROM_INST),
	.aux_ROMADD(aux_ROMADD),
	.aux_S2_PC(aux_S2_PC),
	.aux_T(aux_T),
	.aux_TOS(aux_TOS),
	.CLOCK_in(CLOCK_in),
	.H2(H2),
	.W_reg(W_reg)
);
initial 
begin 
#10000000 $finish;
end 

// CLOCK_in
initial
begin
	repeat(99)
	begin
		CLOCK_in = 1'b0;
		CLOCK_in = #5000 1'b1;
		# 5000;
	end
	CLOCK_in = 1'b0;
	CLOCK_in = #5000 1'b1;
	# 4000;
	repeat(900)
	begin
		CLOCK_in = 1'b0;
		CLOCK_in = #5000 1'b1;
		# 5000;
	end
	CLOCK_in = 1'b0;
end 
endmodule

