// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/25/2022 23:34:37"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          PIPELINE_uINST_BLOCK
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module PIPELINE_uINST_BLOCK_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] ALUC_in;
reg CLK;
reg KMx_in;
reg [1:0] M_in;
reg [1:0] SH_in;
reg [6:0] T_in;
reg [5:0] busA_in;
reg [5:0] busB_in;
reg [5:0] busC_in;
// wires                                               
wire [3:0] ALUC;
wire KMx;
wire [1:0] M;
wire [1:0] SH;
wire [6:0] T;
wire [5:0] busA;
wire [5:0] busB;
wire [5:0] busC;

// assign statements (if any)                          
PIPELINE_uINST_BLOCK i1 (
// port map - connection between master ports and signals/registers   
	.ALUC(ALUC),
	.ALUC_in(ALUC_in),
	.CLK(CLK),
	.KMx(KMx),
	.KMx_in(KMx_in),
	.M(M),
	.M_in(M_in),
	.SH(SH),
	.SH_in(SH_in),
	.T(T),
	.T_in(T_in),
	.busA(busA),
	.busA_in(busA_in),
	.busB(busB),
	.busB_in(busB_in),
	.busC(busC),
	.busC_in(busC_in)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 
// ALUC_in[ 3 ]
initial
begin
	ALUC_in[3] = 1'b0;
	ALUC_in[3] = #10000 1'b1;
	ALUC_in[3] = #10000 1'b0;
end 
// ALUC_in[ 2 ]
initial
begin
	ALUC_in[2] = 1'b0;
	ALUC_in[2] = #10000 1'b1;
	ALUC_in[2] = #10000 1'b0;
end 
// ALUC_in[ 1 ]
initial
begin
	ALUC_in[1] = 1'b0;
	ALUC_in[1] = #10000 1'b1;
	ALUC_in[1] = #10000 1'b0;
end 
// ALUC_in[ 0 ]
initial
begin
	ALUC_in[0] = 1'b0;
	ALUC_in[0] = #10000 1'b1;
	ALUC_in[0] = #10000 1'b0;
end 

// KMx_in
initial
begin
	KMx_in = 1'b0;
	KMx_in = #10000 1'b1;
	KMx_in = #10000 1'b0;
end 
// M_in[ 1 ]
initial
begin
	M_in[1] = 1'b0;
	M_in[1] = #10000 1'b1;
	M_in[1] = #10000 1'b0;
end 
// M_in[ 0 ]
initial
begin
	M_in[0] = 1'b0;
	M_in[0] = #10000 1'b1;
	M_in[0] = #10000 1'b0;
end 
// SH_in[ 1 ]
initial
begin
	SH_in[1] = 1'b0;
	SH_in[1] = #10000 1'b1;
	SH_in[1] = #10000 1'b0;
end 
// SH_in[ 0 ]
initial
begin
	SH_in[0] = 1'b0;
end 
// T_in[ 6 ]
initial
begin
	T_in[6] = 1'b0;
	T_in[6] = #10000 1'b1;
	T_in[6] = #10000 1'b0;
end 
// T_in[ 5 ]
initial
begin
	T_in[5] = 1'b0;
	T_in[5] = #10000 1'b1;
	T_in[5] = #10000 1'b0;
end 
// T_in[ 4 ]
initial
begin
	T_in[4] = 1'b0;
	T_in[4] = #10000 1'b1;
	T_in[4] = #10000 1'b0;
end 
// T_in[ 3 ]
initial
begin
	T_in[3] = 1'b0;
	T_in[3] = #10000 1'b1;
	T_in[3] = #10000 1'b0;
end 
// T_in[ 2 ]
initial
begin
	T_in[2] = 1'b0;
	T_in[2] = #10000 1'b1;
	T_in[2] = #10000 1'b0;
end 
// T_in[ 1 ]
initial
begin
	T_in[1] = 1'b0;
	T_in[1] = #10000 1'b1;
	T_in[1] = #10000 1'b0;
end 
// T_in[ 0 ]
initial
begin
	T_in[0] = 1'b0;
	T_in[0] = #10000 1'b1;
	T_in[0] = #10000 1'b0;
end 
// busA_in[ 5 ]
initial
begin
	busA_in[5] = 1'b0;
	busA_in[5] = #10000 1'b1;
	busA_in[5] = #10000 1'b0;
end 
// busA_in[ 4 ]
initial
begin
	busA_in[4] = 1'b0;
	busA_in[4] = #10000 1'b1;
	busA_in[4] = #10000 1'b0;
end 
// busA_in[ 3 ]
initial
begin
	busA_in[3] = 1'b0;
	busA_in[3] = #10000 1'b1;
	busA_in[3] = #10000 1'b0;
end 
// busA_in[ 2 ]
initial
begin
	busA_in[2] = 1'b0;
	busA_in[2] = #10000 1'b1;
	busA_in[2] = #10000 1'b0;
end 
// busA_in[ 1 ]
initial
begin
	busA_in[1] = 1'b0;
	busA_in[1] = #10000 1'b1;
	busA_in[1] = #10000 1'b0;
end 
// busA_in[ 0 ]
initial
begin
	busA_in[0] = 1'b0;
	busA_in[0] = #10000 1'b1;
	busA_in[0] = #10000 1'b0;
end 
// busB_in[ 5 ]
initial
begin
	busB_in[5] = 1'b0;
	busB_in[5] = #10000 1'b1;
	busB_in[5] = #10000 1'b0;
end 
// busB_in[ 4 ]
initial
begin
	busB_in[4] = 1'b0;
end 
// busB_in[ 3 ]
initial
begin
	busB_in[3] = 1'b0;
	busB_in[3] = #10000 1'b1;
	busB_in[3] = #10000 1'b0;
end 
// busB_in[ 2 ]
initial
begin
	busB_in[2] = 1'b0;
end 
// busB_in[ 1 ]
initial
begin
	busB_in[1] = 1'b0;
end 
// busB_in[ 0 ]
initial
begin
	busB_in[0] = 1'b0;
end 
// busC_in[ 5 ]
initial
begin
	busC_in[5] = 1'b0;
end 
// busC_in[ 4 ]
initial
begin
	busC_in[4] = 1'b0;
	busC_in[4] = #10000 1'b1;
	busC_in[4] = #10000 1'b0;
end 
// busC_in[ 3 ]
initial
begin
	busC_in[3] = 1'b0;
end 
// busC_in[ 2 ]
initial
begin
	busC_in[2] = 1'b0;
	busC_in[2] = #10000 1'b1;
	busC_in[2] = #10000 1'b0;
end 
// busC_in[ 1 ]
initial
begin
	busC_in[1] = 1'b0;
	busC_in[1] = #10000 1'b1;
	busC_in[1] = #10000 1'b0;
end 
// busC_in[ 0 ]
initial
begin
	busC_in[0] = 1'b0;
	busC_in[0] = #10000 1'b1;
	busC_in[0] = #10000 1'b0;
end 
endmodule

