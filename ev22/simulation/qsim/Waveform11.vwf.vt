// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/26/2022 12:33:46"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          UC2_BLOCK
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module UC2_BLOCK_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [5:0] busA3;
reg [5:0] busC4;
reg [5:0] busC5;
reg CondJ;
reg PULL;
reg PULL3;
reg PUSH;
reg PUSH3;
reg r_read3;
reg r_read4;
reg r_read5;
reg r_write3;
reg r_write4;
reg r_write5;
reg w_read3;
reg w_read4;
reg w_read5;
reg w_write3;
reg w_write4;
reg w_write5;
// wires                                               
wire H1;
wire H2;

// assign statements (if any)                          
UC2_BLOCK i1 (
// port map - connection between master ports and signals/registers   
	.busA3(busA3),
	.busC4(busC4),
	.busC5(busC5),
	.CondJ(CondJ),
	.H1(H1),
	.H2(H2),
	.PULL(PULL),
	.PULL3(PULL3),
	.PUSH(PUSH),
	.PUSH3(PUSH3),
	.r_read3(r_read3),
	.r_read4(r_read4),
	.r_read5(r_read5),
	.r_write3(r_write3),
	.r_write4(r_write4),
	.r_write5(r_write5),
	.w_read3(w_read3),
	.w_read4(w_read4),
	.w_read5(w_read5),
	.w_write3(w_write3),
	.w_write4(w_write4),
	.w_write5(w_write5)
);
initial 
begin 
#1000000 $finish;
end 
// busA3[ 5 ]
initial
begin
	busA3[5] = 1'b0;
end 
// busA3[ 4 ]
initial
begin
	busA3[4] = 1'b0;
end 
// busA3[ 3 ]
initial
begin
	busA3[3] = 1'b0;
end 
// busA3[ 2 ]
initial
begin
	busA3[2] = 1'b0;
end 
// busA3[ 1 ]
initial
begin
	busA3[1] = 1'b0;
end 
// busA3[ 0 ]
initial
begin
	busA3[0] = 1'b0;
end 
// busC4[ 5 ]
initial
begin
	busC4[5] = 1'b0;
end 
// busC4[ 4 ]
initial
begin
	busC4[4] = 1'b0;
end 
// busC4[ 3 ]
initial
begin
	busC4[3] = 1'b0;
end 
// busC4[ 2 ]
initial
begin
	busC4[2] = 1'b0;
end 
// busC4[ 1 ]
initial
begin
	busC4[1] = 1'b0;
end 
// busC4[ 0 ]
initial
begin
	busC4[0] = 1'b0;
end 
// busC5[ 5 ]
initial
begin
	busC5[5] = 1'b0;
end 
// busC5[ 4 ]
initial
begin
	busC5[4] = 1'b0;
end 
// busC5[ 3 ]
initial
begin
	busC5[3] = 1'b0;
end 
// busC5[ 2 ]
initial
begin
	busC5[2] = 1'b0;
end 
// busC5[ 1 ]
initial
begin
	busC5[1] = 1'b0;
end 
// busC5[ 0 ]
initial
begin
	busC5[0] = 1'b0;
end 

// CondJ
initial
begin
	CondJ = 1'b0;
	CondJ = #160000 1'b1;
	CondJ = #70000 1'b0;
	CondJ = #10000 1'b1;
	CondJ = #10000 1'b0;
end 

// PULL
initial
begin
	PULL = 1'b0;
	PULL = #100000 1'b1;
	PULL = #10000 1'b0;
	PULL = #10000 1'b1;
	PULL = #10000 1'b0;
end 

// PUSH
initial
begin
	PUSH = 1'b0;
	PUSH = #140000 1'b1;
	PUSH = #10000 1'b0;
	PUSH = #90000 1'b1;
	PUSH = #10000 1'b0;
end 

// PULL3
initial
begin
	PULL3 = 1'b0;
	PULL3 = #100000 1'b1;
	PULL3 = #10000 1'b0;
	PULL3 = #30000 1'b1;
	PULL3 = #10000 1'b0;
	PULL3 = #90000 1'b1;
	PULL3 = #10000 1'b0;
end 

// PUSH3
initial
begin
	PUSH3 = 1'b0;
	PUSH3 = #120000 1'b1;
	PUSH3 = #10000 1'b0;
	PUSH3 = #10000 1'b1;
	PUSH3 = #10000 1'b0;
	PUSH3 = #90000 1'b1;
	PUSH3 = #10000 1'b0;
end 

// r_read3
initial
begin
	r_read3 = 1'b1;
	r_read3 = #10000 1'b0;
	r_read3 = #10000 1'b1;
	r_read3 = #10000 1'b0;
	r_read3 = #50000 1'b1;
	r_read3 = #10000 1'b0;
	r_read3 = #150000 1'b1;
	r_read3 = #10000 1'b0;
end 

// r_read4
initial
begin
	r_read4 = 1'b0;
	r_read4 = #80000 1'b1;
	r_read4 = #10000 1'b0;
	r_read4 = #150000 1'b1;
	r_read4 = #10000 1'b0;
end 

// r_read5
initial
begin
	r_read5 = 1'b0;
	r_read5 = #80000 1'b1;
	r_read5 = #10000 1'b0;
	r_read5 = #150000 1'b1;
	r_read5 = #10000 1'b0;
end 

// r_write3
initial
begin
	r_write3 = 1'b0;
	r_write3 = #80000 1'b1;
	r_write3 = #10000 1'b0;
	r_write3 = #70000 1'b1;
	r_write3 = #10000 1'b0;
end 

// r_write4
initial
begin
	r_write4 = 1'b1;
	r_write4 = #10000 1'b0;
	r_write4 = #160000 1'b1;
	r_write4 = #10000 1'b0;
end 

// r_write5
initial
begin
	r_write5 = 1'b0;
	r_write5 = #20000 1'b1;
	r_write5 = #10000 1'b0;
	r_write5 = #150000 1'b1;
	r_write5 = #10000 1'b0;
end 

// w_read3
initial
begin
	w_read3 = 1'b0;
	w_read3 = #40000 1'b1;
	w_read3 = #10000 1'b0;
	w_read3 = #10000 1'b1;
	w_read3 = #10000 1'b0;
	w_read3 = #10000 1'b1;
	w_read3 = #10000 1'b0;
	w_read3 = #150000 1'b1;
	w_read3 = #10000 1'b0;
end 

// w_read4
initial
begin
	w_read4 = 1'b0;
	w_read4 = #80000 1'b1;
	w_read4 = #10000 1'b0;
	w_read4 = #150000 1'b1;
	w_read4 = #10000 1'b0;
end 

// w_read5
initial
begin
	w_read5 = 1'b0;
	w_read5 = #80000 1'b1;
	w_read5 = #10000 1'b0;
	w_read5 = #150000 1'b1;
	w_read5 = #10000 1'b0;
end 

// w_write3
initial
begin
	w_write3 = 1'b0;
	w_write3 = #80000 1'b1;
	w_write3 = #10000 1'b0;
	w_write3 = #100000 1'b1;
	w_write3 = #10000 1'b0;
end 

// w_write4
initial
begin
	w_write4 = 1'b0;
	w_write4 = #40000 1'b1;
	w_write4 = #10000 1'b0;
	w_write4 = #150000 1'b1;
	w_write4 = #10000 1'b0;
end 

// w_write5
initial
begin
	w_write5 = 1'b0;
	w_write5 = #60000 1'b1;
	w_write5 = #10000 1'b0;
	w_write5 = #140000 1'b1;
	w_write5 = #10000 1'b0;
end 
endmodule

